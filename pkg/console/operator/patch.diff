diff --git a/pkg/console/subresource/configmap/brand_custom_logo.go b/pkg/console/subresource/configmap/brand_custom_logo.go
deleted file mode 100644
index a88caba98..000000000
--- a/pkg/console/subresource/configmap/brand_custom_logo.go
+++ /dev/null
@@ -1,29 +0,0 @@
-package configmap
-
-import v1 "github.com/openshift/api/operator/v1"
-
-// borrowed from the image package
-// image.RegisterFormat()
-var commonImageHeaders = []string{
-	"\xff\xd8\xff",      // "image/jpeg"
-	"\x89PNG\r\n\x1a\n", // "image/png"
-	"GIF87a",            // "image/gif"
-	"GIF89a",            // "image/gif"
-}
-
-func FileNameOrKeyInconsistentlySet(operatorConfig *v1.Console) bool {
-	logoConfigMapName := operatorConfig.Spec.Customization.CustomLogoFile.Name
-	logoImageKey := operatorConfig.Spec.Customization.CustomLogoFile.Key
-	return (len(logoConfigMapName) == 0) != (len(logoImageKey) == 0)
-}
-
-func FileNameNotSet(operatorConfig *v1.Console) bool {
-	logoConfigMapName := operatorConfig.Spec.Customization.CustomLogoFile.Name
-	return len(logoConfigMapName) == 0
-}
-
-func IsRemoved(operatorConfig *v1.Console) bool {
-	logoConfigMapName := operatorConfig.Spec.Customization.CustomLogoFile.Name
-	logoImageKey := operatorConfig.Spec.Customization.CustomLogoFile.Key
-	return logoConfigMapName == "" && logoImageKey == ""
-}
diff --git a/pkg/console/subresource/configmap/brand_custom_logo_test.go b/pkg/console/subresource/configmap/brand_custom_logo_test.go
deleted file mode 100644
index 877355e27..000000000
--- a/pkg/console/subresource/configmap/brand_custom_logo_test.go
+++ /dev/null
@@ -1,185 +0,0 @@
-package configmap
-
-import (
-	"testing"
-
-	v1 "github.com/openshift/api/config/v1"
-
-	operator "github.com/openshift/api/operator/v1"
-
-	"github.com/go-test/deep"
-)
-
-func TestOnlyFileOrKeySet(t *testing.T) {
-	tests := []struct {
-		name   string
-		input  *operator.Console
-		output bool
-	}{
-		{
-			name:   "No custom logo file or key set",
-			input:  &operator.Console{},
-			output: false,
-		}, {
-			name: "Both custom logo file and key set",
-			input: &operator.Console{
-				Spec: operator.ConsoleSpec{
-					Customization: operator.ConsoleCustomization{
-						CustomLogoFile: v1.ConfigMapFileReference{
-							Name: "custom-logo-file",
-							Key:  "img.png",
-						},
-					},
-				},
-			},
-			output: false,
-		}, {
-			name: "Custom logo file set but not key",
-			input: &operator.Console{
-				Spec: operator.ConsoleSpec{
-					Customization: operator.ConsoleCustomization{
-						CustomLogoFile: v1.ConfigMapFileReference{
-							Name: "custom-logo-file",
-						},
-					},
-				},
-			},
-			output: true,
-		}, {
-			name: "Custom logo key set but not file",
-			input: &operator.Console{
-				Spec: operator.ConsoleSpec{
-					Customization: operator.ConsoleCustomization{
-						CustomLogoFile: v1.ConfigMapFileReference{
-							Key: "img.png",
-						},
-					},
-				},
-			},
-			output: true,
-		},
-	}
-	for _, tt := range tests {
-		t.Run(tt.name, func(t *testing.T) {
-			if diff := deep.Equal(FileNameOrKeyInconsistentlySet(tt.input), tt.output); diff != nil {
-				t.Error(diff)
-			}
-		})
-	}
-}
-
-func TestFileNameNotSet(t *testing.T) {
-	tests := []struct {
-		name   string
-		input  *operator.Console
-		output bool
-	}{
-		{
-			name:   "No custom logo file data",
-			input:  &operator.Console{},
-			output: true,
-		}, {
-			name: "Custom logo name and key set",
-			input: &operator.Console{
-				Spec: operator.ConsoleSpec{
-					Customization: operator.ConsoleCustomization{
-						CustomLogoFile: v1.ConfigMapFileReference{
-							Name: "custom-logo-file",
-							Key:  "img.png",
-						},
-					},
-				},
-			},
-			output: false,
-		}, {
-			name: "Custom logo name set",
-			input: &operator.Console{
-				Spec: operator.ConsoleSpec{
-					Customization: operator.ConsoleCustomization{
-						CustomLogoFile: v1.ConfigMapFileReference{
-							Name: "custom-logo-file",
-						},
-					},
-				},
-			},
-			output: false,
-		}, {
-			name: "Custom logo key set",
-			input: &operator.Console{
-				Spec: operator.ConsoleSpec{
-					Customization: operator.ConsoleCustomization{
-						CustomLogoFile: v1.ConfigMapFileReference{
-							Key: "img.png",
-						},
-					},
-				},
-			},
-			output: true,
-		},
-	}
-	for _, tt := range tests {
-		t.Run(tt.name, func(t *testing.T) {
-			if diff := deep.Equal(FileNameNotSet(tt.input), tt.output); diff != nil {
-				t.Error(diff)
-			}
-		})
-	}
-}
-
-func TestIsRemoved(t *testing.T) {
-	tests := []struct {
-		name   string
-		input  *operator.Console
-		output bool
-	}{
-		{
-			name:   "Custom logo has been removed if there is no custom logo file on config",
-			input:  &operator.Console{},
-			output: true,
-		}, {
-			name: "Custom logo has not been removed if there is custom logo file config",
-			input: &operator.Console{
-				Spec: operator.ConsoleSpec{
-					Customization: operator.ConsoleCustomization{
-						CustomLogoFile: v1.ConfigMapFileReference{
-							Name: "custom-logo-file",
-							Key:  "img.png",
-						},
-					},
-				},
-			},
-			output: false,
-		}, {
-			name: "Custom logo has not been removed if custom logo file config is partially provided via name",
-			input: &operator.Console{
-				Spec: operator.ConsoleSpec{
-					Customization: operator.ConsoleCustomization{
-						CustomLogoFile: v1.ConfigMapFileReference{
-							Name: "custom-logo-file",
-						},
-					},
-				},
-			},
-			output: false,
-		}, {
-			name: "Custom logo has not been removed if custom logo file config is partially provided via key",
-			input: &operator.Console{
-				Spec: operator.ConsoleSpec{
-					Customization: operator.ConsoleCustomization{
-						CustomLogoFile: v1.ConfigMapFileReference{
-							Key: "img.png",
-						},
-					},
-				},
-			},
-			output: false,
-		},
-	}
-	for _, tt := range tests {
-		t.Run(tt.name, func(t *testing.T) {
-			if diff := deep.Equal(IsRemoved(tt.input), tt.output); diff != nil {
-				t.Error(diff)
-			}
-		})
-	}
-}
diff --git a/pkg/console/subresource/configmap/configmap.go b/pkg/console/subresource/configmap/configmap.go
index 000973b39..ad53e7932 100644
--- a/pkg/console/subresource/configmap/configmap.go
+++ b/pkg/console/subresource/configmap/configmap.go
@@ -89,7 +89,8 @@ func DefaultConfigMap(
 		ContentSecurityPolicies(aggregateCSPDirectives(availablePlugins)).
 		ContentSecurityPolicyEnabled(contentSecurityPolicyEnabled).
 		Proxy(getPluginsProxyServices(availablePlugins)).
-		CustomLogoFile(operatorConfig.Spec.Customization.CustomLogoFile.Key).
+		CustomLogoFile(operatorConfig.Spec.Customization.CustomLogoFile). // TODO Remove deprecated CustomLogoFile API.
+		CustomLogos(operatorConfig.Spec.Customization.Logos).
 		CustomProductName(operatorConfig.Spec.Customization.CustomProductName).
 		CustomDeveloperCatalog(operatorConfig.Spec.Customization.DeveloperCatalog).
 		ProjectAccess(operatorConfig.Spec.Customization.ProjectAccess).
diff --git a/pkg/console/subresource/configmap/configmap_test.go b/pkg/console/subresource/configmap/configmap_test.go
index a8e4347d9..9217b5764 100644
--- a/pkg/console/subresource/configmap/configmap_test.go
+++ b/pkg/console/subresource/configmap/configmap_test.go
@@ -454,8 +454,9 @@ providers: {}
 				},
 			},
 		},
+		// TODO remove deprecated CustomLogoFile API
 		{
-			name: "Test operator config with Custom Branding Values",
+			name: "Test operator config with custom branding values (CustomLogoFile)",
 			args: args{
 				authConfig: &configv1.Authentication{},
 				operatorConfig: &operatorv1.Console{
@@ -530,8 +531,189 @@ session: {}
 customization:
   branding: ` + string(operatorv1.BrandDedicatedLegacy) + `
   documentationBaseURL: ` + mockOperatorDocURL + `
-  customLogoFile: /var/logo/logo.svg
   customProductName: custom-product-name
+  logos:
+    - themes:
+        - mode: ` + string(operatorv1.ThemeModeDark) + `
+          source:
+            from: ConfigMap
+            configmap:
+              name: custom-logo-file
+              key: logo.svg
+        - mode: ` + string(operatorv1.ThemeModeLight) + `
+          source:
+            from: ConfigMap
+            configmap:
+              name: custom-logo-file
+              key: logo.svg
+      type: ` + string(operatorv1.LogoTypeMasthead) + `
+  perspectives:
+    - id: dev
+      visibility:
+        state: Disabled
+servingInfo:
+  bindAddress: https://[::]:8443
+  certFile: /var/serving-cert/tls.crt
+  keyFile: /var/serving-cert/tls.key
+providers: {}
+`,
+				},
+			},
+		},
+		{
+			name: "Test operator config with custom branding values (Logos)",
+			args: args{
+				authConfig: &configv1.Authentication{},
+				operatorConfig: &operatorv1.Console{
+					Spec: operatorv1.ConsoleSpec{
+						OperatorSpec: operatorv1.OperatorSpec{},
+						Customization: operatorv1.ConsoleCustomization{
+							Brand:                operatorv1.BrandDedicated,
+							DocumentationBaseURL: mockOperatorDocURL,
+							CustomProductName:    "custom-product-name",
+							Logos: []operatorv1.Logo{
+								{
+									Type: operatorv1.LogoTypeMasthead,
+									Themes: []operatorv1.Theme{
+										{
+											Mode: operatorv1.ThemeModeDark,
+											Source: operatorv1.FileReferenceSource{
+												From: "ConfigMap",
+												ConfigMap: &operatorv1.ConfigMapFileReference{
+													Name: "masthead-dark",
+													Key:  "masthead-dark-logo.png",
+												},
+											},
+										},
+										{
+											Mode: operatorv1.ThemeModeLight,
+											Source: operatorv1.FileReferenceSource{
+												From: "ConfigMap",
+												ConfigMap: &operatorv1.ConfigMapFileReference{
+													Name: "masthead-light",
+													Key:  "masthead-light-logo.png",
+												},
+											},
+										},
+									},
+								},
+								{
+									Type: operatorv1.LogoTypeFavicon,
+									Themes: []operatorv1.Theme{
+										{
+											Mode: operatorv1.ThemeModeDark,
+											Source: operatorv1.FileReferenceSource{
+												From: "ConfigMap",
+												ConfigMap: &operatorv1.ConfigMapFileReference{
+													Name: "favicon-dark",
+													Key:  "favicon-dark-logo.png",
+												},
+											},
+										},
+										{
+											Mode: operatorv1.ThemeModeLight,
+											Source: operatorv1.FileReferenceSource{
+												From: "ConfigMap",
+												ConfigMap: &operatorv1.ConfigMapFileReference{
+													Name: "favicon-light",
+													Key:  "favicon-light-logo.png",
+												},
+											},
+										},
+									},
+								},
+							},
+						},
+					},
+					Status: operatorv1.ConsoleStatus{},
+				},
+				consoleConfig: &configv1.Console{},
+				managedConfig: &corev1.ConfigMap{
+					Data: map[string]string{configKey: `kind: ConsoleConfig
+apiVersion: console.openshift.io/v1
+session: {}
+customization:
+  branding: online
+  documentationBaseURL: https://docs.okd.io/4.4/
+`,
+					},
+				},
+				infrastructureConfig: &configv1.Infrastructure{
+					Status: configv1.InfrastructureStatus{
+						APIServerURL: mockAPIServer,
+					},
+				},
+				rt: &routev1.Route{
+					ObjectMeta: metav1.ObjectMeta{
+						Name: api.OpenShiftConsoleName,
+					},
+					Spec: routev1.RouteSpec{
+						Host: host,
+					},
+				},
+				inactivityTimeoutSeconds: 0,
+			},
+			want: &corev1.ConfigMap{
+				TypeMeta: metav1.TypeMeta{
+					Kind:       "ConfigMap",
+					APIVersion: "v1",
+				},
+				ObjectMeta: metav1.ObjectMeta{
+					Name:        api.OpenShiftConsoleConfigMapName,
+					Namespace:   api.OpenShiftConsoleNamespace,
+					Labels:      map[string]string{"app": api.OpenShiftConsoleName},
+					Annotations: map[string]string{},
+					OwnerReferences: []metav1.OwnerReference{{
+						APIVersion: "operator.openshift.io/v1",
+						Kind:       "Console",
+						Controller: ptr.To(true),
+					}},
+				},
+				Data: map[string]string{configKey: `kind: ConsoleConfig
+apiVersion: console.openshift.io/v1
+auth:
+  authType: openshift
+  clientID: console
+  clientSecretFile: /var/oauth-config/clientSecret
+  oauthEndpointCAFile: /var/oauth-serving-cert/ca-bundle.crt
+clusterInfo:
+  consoleBaseAddress: https://` + host + `
+  masterPublicURL: ` + mockAPIServer + `
+  releaseVersion: ` + testReleaseVersion + `
+session: {}
+customization:
+  branding: ` + string(operatorv1.BrandDedicatedLegacy) + `
+  documentationBaseURL: ` + mockOperatorDocURL + `
+  customProductName: custom-product-name
+  logos:
+    - themes:
+        - mode: ` + string(operatorv1.ThemeModeDark) + `
+          source:
+            from: ConfigMap
+            configmap:
+              name: masthead-dark
+              key: masthead-dark-logo.png
+        - mode: ` + string(operatorv1.ThemeModeLight) + `
+          source:
+            from: ConfigMap
+            configmap:
+              name: masthead-light
+              key: masthead-light-logo.png
+      type: ` + string(operatorv1.LogoTypeMasthead) + `
+    - themes:
+        - mode: ` + string(operatorv1.ThemeModeDark) + `
+          source:
+            from: ConfigMap
+            configmap:
+              name: favicon-dark
+              key: favicon-dark-logo.png
+        - mode: ` + string(operatorv1.ThemeModeLight) + `
+          source:
+            from: ConfigMap
+            configmap:
+              name: favicon-light
+              key: favicon-light-logo.png
+      type: ` + string(operatorv1.LogoTypeFavicon) + `
   perspectives:
     - id: dev
       visibility:
diff --git a/pkg/console/subresource/consoleserver/config_builder.go b/pkg/console/subresource/consoleserver/config_builder.go
index c578aae3c..f5a0a0a73 100644
--- a/pkg/console/subresource/consoleserver/config_builder.go
+++ b/pkg/console/subresource/consoleserver/config_builder.go
@@ -18,11 +18,10 @@ import (
 )

 const (
+	certFilePath             = "/var/serving-cert/tls.crt" // serving info
 	clientSecretFilePath     = "/var/oauth-config/clientSecret"
+	keyFilePath              = "/var/serving-cert/tls.key"
 	oauthServingCertFilePath = "/var/oauth-serving-cert/ca-bundle.crt"
-	// serving info
-	certFilePath = "/var/serving-cert/tls.crt"
-	keyFilePath  = "/var/serving-cert/tls.key"
 )

 // ConsoleServerCLIConfigBuilder
@@ -42,42 +41,42 @@ const (
 //
 //	b.Host().Brand("").Config()
 type ConsoleServerCLIConfigBuilder struct {
-	host                         string
-	logoutRedirectURL            string
-	brand                        operatorv1.Brand
-	docURL                       string
+	addPage                      operatorv1.AddPage
 	apiServerURL                 string
+	authType                     string
+	brand                        operatorv1.Brand
+	CAFile                       string
+	capabilities                 []operatorv1.Capability
+	contentSecurityPolicyEnabled bool
+	contentSecurityPolicyList    map[v1.DirectiveType][]string
 	controlPlaneToplogy          configv1.TopologyMode
-	statusPageID                 string
+	copiedCSVsDisabled           bool
+	customHostnameRedirectPort   int
 	customProductName            string
 	devCatalogCustomization      operatorv1.DeveloperConsoleCatalogCustomization
-	projectAccess                operatorv1.ProjectAccess
-	quickStarts                  operatorv1.QuickStarts
-	addPage                      operatorv1.AddPage
-	perspectives                 []operatorv1.Perspective
-	customLogoFile               string
-	CAFile                       string
-	monitoring                   map[string]string
-	customHostnameRedirectPort   int
-	inactivityTimeoutSeconds     int
-	pluginsList                  map[string]string
+	docURL                       string
+	host                         string
 	i18nNamespaceList            []string
-	proxyServices                []ProxyService
-	telemetry                    map[string]string
-	releaseVersion               string
+	inactivityTimeoutSeconds     int
+	logos                        []operatorv1.Logo
+	logoutRedirectURL            string
+	monitoring                   map[string]string
 	nodeArchitectures            []string
 	nodeOperatingSystems         []string
-	copiedCSVsDisabled           bool
 	oauthClientID                string
 	oidcExtraScopes              []string
 	oidcIssuerURL                string
 	oidcOCLoginCommand           string
-	authType                     string
-	sessionEncryptionFile        string
+	perspectives                 []operatorv1.Perspective
+	pluginsList                  map[string]string
+	projectAccess                operatorv1.ProjectAccess
+	proxyServices                []ProxyService
+	quickStarts                  operatorv1.QuickStarts
+	releaseVersion               string
 	sessionAuthenticationFile    string
-	capabilities                 []operatorv1.Capability
-	contentSecurityPolicyEnabled bool
-	contentSecurityPolicyList    map[v1.DirectiveType][]string
+	sessionEncryptionFile        string
+	statusPageID                 string
+	telemetry                    map[string]string
 }

 func (b *ConsoleServerCLIConfigBuilder) Host(host string) *ConsoleServerCLIConfigBuilder {
@@ -128,9 +127,40 @@ func (b *ConsoleServerCLIConfigBuilder) Perspectives(perspectives []operatorv1.P
 	b.perspectives = perspectives
 	return b
 }
-func (b *ConsoleServerCLIConfigBuilder) CustomLogoFile(customLogoFile string) *ConsoleServerCLIConfigBuilder {
-	if customLogoFile != "" {
-		b.customLogoFile = "/var/logo/" + customLogoFile // append path here to prevent customLogoFile from always being just /var/logo/
+
+// TODO Remove deprecated CustomLogoFile API.
+func (b *ConsoleServerCLIConfigBuilder) CustomLogoFile(customLogoFile configv1.ConfigMapFileReference) *ConsoleServerCLIConfigBuilder {
+	if customLogoFile.Key != "" && customLogoFile.Name != "" {
+		configMapReference := operatorv1.ConfigMapFileReference(customLogoFile)
+		b.logos = []operatorv1.Logo{
+			{
+				Type: operatorv1.LogoTypeMasthead,
+				Themes: []operatorv1.Theme{
+					{
+						Mode: operatorv1.ThemeModeDark,
+						Source: operatorv1.FileReferenceSource{
+							From:      "ConfigMap",
+							ConfigMap: &configMapReference,
+						},
+					},
+					{
+						Mode: operatorv1.ThemeModeLight,
+						Source: operatorv1.FileReferenceSource{
+							From:      "ConfigMap",
+							ConfigMap: &configMapReference,
+						},
+					},
+				},
+			},
+		}
+	}
+	return b
+}
+
+// Update/replace this function
+func (b *ConsoleServerCLIConfigBuilder) CustomLogos(customLogos []operatorv1.Logo) *ConsoleServerCLIConfigBuilder {
+	if len(customLogos) > 0 {
+		b.logos = customLogos
 	}
 	return b
 }
@@ -254,20 +284,20 @@ func (b *ConsoleServerCLIConfigBuilder) CopiedCSVsDisabled(copiedCSVsDisabled bo

 func (b *ConsoleServerCLIConfigBuilder) Config() Config {
 	return Config{
-		Kind:                         "ConsoleConfig",
 		APIVersion:                   "console.openshift.io/v1",
 		Auth:                         b.auth(),
-		Session:                      b.session(),
 		ClusterInfo:                  b.clusterInfo(),
+		ContentSecurityPolicy:        b.contentSecurityPolicy(),
+		ContentSecurityPolicyEnabled: b.getContentSecurityPolicyEnabled(),
 		Customization:                b.customization(),
-		ServingInfo:                  b.servingInfo(),
-		Providers:                    b.providers(),
+		I18nNamespaces:               b.i18nNamespaces(),
+		Kind:                         "ConsoleConfig",
 		MonitoringInfo:               b.monitoringInfo(),
 		Plugins:                      b.plugins(),
-		I18nNamespaces:               b.i18nNamespaces(),
+		Providers:                    b.providers(),
 		Proxy:                        b.proxy(),
-		ContentSecurityPolicy:        b.contentSecurityPolicy(),
-		ContentSecurityPolicyEnabled: b.getContentSecurityPolicyEnabled(),
+		ServingInfo:                  b.servingInfo(),
+		Session:                      b.session(),
 		Telemetry:                    b.telemetry,
 	}
 }
@@ -359,12 +389,12 @@ func (b *ConsoleServerCLIConfigBuilder) auth() Auth {
 	}
 	conf := Auth{
 		AuthType:                 b.authType,
-		OIDCIssuer:               b.oidcIssuerURL,
 		ClientID:                 clientID,
 		ClientSecretFile:         clientSecretFilePath,
-		OAuthEndpointCAFile:      b.CAFile,
 		InactivityTimeoutSeconds: b.inactivityTimeoutSeconds,
+		OAuthEndpointCAFile:      b.CAFile,
 		OIDCExtraScopes:          b.oidcExtraScopes,
+		OIDCIssuer:               b.oidcIssuerURL,
 		OIDCOCLoginCommand:       b.oidcOCLoginCommand,
 	}
 	if len(b.logoutRedirectURL) > 0 {
@@ -395,8 +425,8 @@ func (b *ConsoleServerCLIConfigBuilder) customization() Customization {
 	if len(b.customProductName) > 0 {
 		conf.CustomProductName = b.customProductName
 	}
-	if len(b.customLogoFile) > 0 {
-		conf.CustomLogoFile = b.customLogoFile
+	if len(b.logos) > 0 {
+		conf.Logos = b.logos
 	}

 	if b.devCatalogCustomization.Categories != nil {
diff --git a/pkg/console/subresource/consoleserver/config_builder_test.go b/pkg/console/subresource/consoleserver/config_builder_test.go
index 8d9bf5d77..89b4e9851 100644
--- a/pkg/console/subresource/consoleserver/config_builder_test.go
+++ b/pkg/console/subresource/consoleserver/config_builder_test.go
@@ -992,21 +992,21 @@ func TestConsoleServerCLIConfigBuilderYAML(t *testing.T) {
 			},
 			output: `apiVersion: console.openshift.io/v1
 kind: ConsoleConfig
-servingInfo:
-  bindAddress: https://[::]:8443
-  certFile: /var/serving-cert/tls.crt
-  keyFile: /var/serving-cert/tls.key
-clusterInfo: {}
 auth:
   clientID: console
   clientSecretFile: /var/oauth-config/clientSecret
-session: {}
+clusterInfo: {}
 customization:
   perspectives:
   - id: dev
     visibility:
       state: Disabled
 providers: {}
+servingInfo:
+  bindAddress: https://[::]:8443
+  certFile: /var/serving-cert/tls.crt
+  keyFile: /var/serving-cert/tls.key
+session: {}
 `,
 		},
 		{
@@ -1037,24 +1037,24 @@ providers: {}
 			},
 			output: `apiVersion: console.openshift.io/v1
 kind: ConsoleConfig
-servingInfo:
-  bindAddress: https://[::]:8443
-  certFile: /var/serving-cert/tls.crt
-  keyFile: /var/serving-cert/tls.key
-clusterInfo: {}
 auth:
   authType: oidc
   clientID: testing-id
   clientSecretFile: /var/oauth-config/clientSecret
-session:
-  cookieEncryptionKeyFile: /var/session-secret/sessionEncryptionKey
-  cookieAuthenticationKeyFile: /var/session-secret/sessionAuthenticationKey
+clusterInfo: {}
 customization:
   perspectives:
   - id: dev
     visibility:
       state: Disabled
 providers: {}
+servingInfo:
+  bindAddress: https://[::]:8443
+  certFile: /var/serving-cert/tls.crt
+  keyFile: /var/serving-cert/tls.key
+session:
+  cookieAuthenticationKeyFile: /var/session-secret/sessionAuthenticationKey
+  cookieEncryptionKeyFile: /var/session-secret/sessionEncryptionKey
 `,
 		},
 		{
@@ -1070,26 +1070,26 @@ providers: {}
 			},
 			output: `apiVersion: console.openshift.io/v1
 kind: ConsoleConfig
-servingInfo:
-  bindAddress: https://[::]:8443
-  certFile: /var/serving-cert/tls.crt
-  keyFile: /var/serving-cert/tls.key
-clusterInfo:
-  consoleBaseAddress: https://foobar.com/host
-  masterPublicURL: https://foobar.com/api
 auth:
   authType: openshift
   clientID: console
   clientSecretFile: /var/oauth-config/clientSecret
-  oauthEndpointCAFile: /var/oauth-serving-cert/ca-bundle.crt
   logoutRedirect: https://foobar.com/logout
-session: {}
+  oauthEndpointCAFile: /var/oauth-serving-cert/ca-bundle.crt
+clusterInfo:
+  consoleBaseAddress: https://foobar.com/host
+  masterPublicURL: https://foobar.com/api
 customization:
   perspectives:
   - id: dev
     visibility:
       state: Disabled
 providers: {}
+servingInfo:
+  bindAddress: https://[::]:8443
+  certFile: /var/serving-cert/tls.crt
+  keyFile: /var/serving-cert/tls.key
+session: {}
 `,
 		},
 		{
@@ -1100,15 +1100,10 @@ providers: {}
 			},
 			output: `apiVersion: console.openshift.io/v1
 kind: ConsoleConfig
-servingInfo:
-  bindAddress: https://[::]:8443
-  certFile: /var/serving-cert/tls.crt
-  keyFile: /var/serving-cert/tls.key
-clusterInfo: {}
 auth:
   clientID: console
   clientSecretFile: /var/oauth-config/clientSecret
-session: {}
+clusterInfo: {}
 customization:
   perspectives:
   - id: dev
@@ -1116,6 +1111,11 @@ customization:
       state: Disabled
 providers:
   statuspageID: status-12345
+servingInfo:
+  bindAddress: https://[::]:8443
+  certFile: /var/serving-cert/tls.crt
+  keyFile: /var/serving-cert/tls.key
+session: {}
 `,
 		},
 		{
@@ -1127,21 +1127,21 @@ providers:
 			},
 			output: `apiVersion: console.openshift.io/v1
 kind: ConsoleConfig
-servingInfo:
-  bindAddress: https://[::]:8443
-  certFile: /var/serving-cert/tls.crt
-  keyFile: /var/serving-cert/tls.key
-clusterInfo: {}
 auth:
   clientID: console
   clientSecretFile: /var/oauth-config/clientSecret
-session: {}
+clusterInfo: {}
 customization:
   perspectives:
   - id: dev
     visibility:
       state: Disabled
 providers: {}
+servingInfo:
+  bindAddress: https://[::]:8443
+  certFile: /var/serving-cert/tls.crt
+  keyFile: /var/serving-cert/tls.key
+session: {}
 `,
 		},
 		{
@@ -1155,15 +1155,10 @@ providers: {}
 			},
 			output: `apiVersion: console.openshift.io/v1
 kind: ConsoleConfig
-servingInfo:
-  bindAddress: https://[::]:8443
-  certFile: /var/serving-cert/tls.crt
-  keyFile: /var/serving-cert/tls.key
-clusterInfo: {}
 auth:
   clientID: console
   clientSecretFile: /var/oauth-config/clientSecret
-session: {}
+clusterInfo: {}
 customization:
   developerCatalog:
     categories: []
@@ -1173,6 +1168,11 @@ customization:
     visibility:
       state: Disabled
 providers: {}
+servingInfo:
+  bindAddress: https://[::]:8443
+  certFile: /var/serving-cert/tls.crt
+  keyFile: /var/serving-cert/tls.key
+session: {}
 `,
 		},
 		{
@@ -1207,15 +1207,10 @@ providers: {}
 			},
 			output: `apiVersion: console.openshift.io/v1
 kind: ConsoleConfig
-servingInfo:
-  bindAddress: https://[::]:8443
-  certFile: /var/serving-cert/tls.crt
-  keyFile: /var/serving-cert/tls.key
-clusterInfo: {}
 auth:
   clientID: console
   clientSecretFile: /var/oauth-config/clientSecret
-session: {}
+clusterInfo: {}
 customization:
   developerCatalog:
     categories:
@@ -1238,6 +1233,11 @@ customization:
     visibility:
       state: Disabled
 providers: {}
+servingInfo:
+  bindAddress: https://[::]:8443
+  certFile: /var/serving-cert/tls.crt
+  keyFile: /var/serving-cert/tls.key
+session: {}
 `,
 		},
 		{
@@ -1251,28 +1251,28 @@ providers: {}
 			},
 			output: `apiVersion: console.openshift.io/v1
 kind: ConsoleConfig
-servingInfo:
-  bindAddress: https://[::]:8443
-  certFile: /var/serving-cert/tls.crt
-  keyFile: /var/serving-cert/tls.key
-clusterInfo: {}
 auth:
   clientID: console
   clientSecretFile: /var/oauth-config/clientSecret
-session: {}
+clusterInfo: {}
 customization:
   developerCatalog:
     categories: null
     types:
-      state: Disabled
       disabled:
       - type1
       - type2
+      state: Disabled
   perspectives:
   - id: dev
     visibility:
       state: Disabled
 providers: {}
+servingInfo:
+  bindAddress: https://[::]:8443
+  certFile: /var/serving-cert/tls.crt
+  keyFile: /var/serving-cert/tls.key
+session: {}
 `,
 		},
 		{
@@ -1286,26 +1286,26 @@ providers: {}
 			},
 			output: `apiVersion: console.openshift.io/v1
 kind: ConsoleConfig
-servingInfo:
-  bindAddress: https://[::]:8443
-  certFile: /var/serving-cert/tls.crt
-  keyFile: /var/serving-cert/tls.key
-clusterInfo: {}
 auth:
   clientID: console
   clientSecretFile: /var/oauth-config/clientSecret
-session: {}
+clusterInfo: {}
 customization:
   developerCatalog:
     categories: null
     types:
-      state: Enabled
       enabled: []
+      state: Enabled
   perspectives:
   - id: dev
     visibility:
       state: Disabled
 providers: {}
+servingInfo:
+  bindAddress: https://[::]:8443
+  certFile: /var/serving-cert/tls.crt
+  keyFile: /var/serving-cert/tls.key
+session: {}
 `,
 		},
 		{
@@ -1322,15 +1322,10 @@ providers: {}
 			},
 			output: `apiVersion: console.openshift.io/v1
 kind: ConsoleConfig
-servingInfo:
-  bindAddress: https://[::]:8443
-  certFile: /var/serving-cert/tls.crt
-  keyFile: /var/serving-cert/tls.key
-clusterInfo: {}
 auth:
   clientID: console
   clientSecretFile: /var/oauth-config/clientSecret
-session: {}
+clusterInfo: {}
 customization:
   addPage:
     disabledActions:
@@ -1341,6 +1336,11 @@ customization:
     visibility:
       state: Disabled
 providers: {}
+servingInfo:
+  bindAddress: https://[::]:8443
+  certFile: /var/serving-cert/tls.crt
+  keyFile: /var/serving-cert/tls.key
+session: {}
 `,
 		},
 		{
@@ -1364,19 +1364,13 @@ providers: {}
 			},
 			output: `apiVersion: console.openshift.io/v1
 kind: ConsoleConfig
-servingInfo:
-  bindAddress: https://[::]:8443
-  certFile: /var/serving-cert/tls.crt
-  keyFile: /var/serving-cert/tls.key
-  redirectPort: ` + strconv.Itoa(api.RedirectContainerPort) + `
-clusterInfo:
-  masterPublicURL: https://foobar.com/api
 auth:
   authType: disabled
   clientID: console
   clientSecretFile: /var/oauth-config/clientSecret
   logoutRedirect: https://foobar.com/logout
-session: {}
+clusterInfo:
+  masterPublicURL: https://foobar.com/api
 customization:
   branding: okd
   documentationBaseURL: https://foobar.com/docs
@@ -1384,13 +1378,19 @@ customization:
   - id: dev
     visibility:
       state: Disabled
-providers:
-  statuspageID: status-12345
+i18nNamespaces:
+- plugin__plugin1
 plugins:
   plugin1: plugin1_url
   plugin2: plugin2_url
-i18nNamespaces:
-- plugin__plugin1
+providers:
+  statuspageID: status-12345
+servingInfo:
+  bindAddress: https://[::]:8443
+  certFile: /var/serving-cert/tls.crt
+  keyFile: /var/serving-cert/tls.key
+  redirectPort: ` + strconv.Itoa(api.RedirectContainerPort) + `
+session: {}
 `,
 		},
 		{
@@ -1407,25 +1407,25 @@ i18nNamespaces:
 			},
 			output: `apiVersion: console.openshift.io/v1
 kind: ConsoleConfig
-servingInfo:
-  bindAddress: https://[::]:8443
-  certFile: /var/serving-cert/tls.crt
-  keyFile: /var/serving-cert/tls.key
-clusterInfo: {}
 auth:
   clientID: console
   clientSecretFile: /var/oauth-config/clientSecret
-session: {}
+clusterInfo: {}
 customization:
-  quickStarts:
-    disabled:
-    - quickStarts0
-    - quickStarts1
   perspectives:
   - id: dev
     visibility:
       state: Disabled
+  quickStarts:
+    disabled:
+    - quickStarts0
+    - quickStarts1
 providers: {}
+servingInfo:
+  bindAddress: https://[::]:8443
+  certFile: /var/serving-cert/tls.crt
+  keyFile: /var/serving-cert/tls.key
+session: {}
 `,
 		},
 		{
@@ -1453,45 +1453,45 @@ providers: {}
 			},
 			output: `apiVersion: console.openshift.io/v1
 kind: ConsoleConfig
-servingInfo:
-  bindAddress: https://[::]:8443
-  certFile: /var/serving-cert/tls.crt
-  keyFile: /var/serving-cert/tls.key
-clusterInfo: {}
 auth:
   clientID: console
   clientSecretFile: /var/oauth-config/clientSecret
-session: {}
+clusterInfo: {}
 customization:
   perspectives:
   - id: perspective1
     visibility:
-      state: AccessReview
       accessReview:
-        required:
+        missing:
         - namespace: ""
           verb: list
           group: ""
           version: ""
-          resource: namespaces
+          resource: clusterroles
           subresource: ""
           name: ""
           fieldselector: null
           labelselector: null
-        missing:
+        required:
         - namespace: ""
           verb: list
           group: ""
           version: ""
-          resource: clusterroles
+          resource: namespaces
           subresource: ""
           name: ""
           fieldselector: null
           labelselector: null
+      state: AccessReview
   - id: perspective2
     visibility:
       state: Disabled
 providers: {}
+servingInfo:
+  bindAddress: https://[::]:8443
+  certFile: /var/serving-cert/tls.crt
+  keyFile: /var/serving-cert/tls.key
+session: {}
 `,
 		},
 		{
@@ -1523,52 +1523,52 @@ providers: {}
 			},
 			output: `apiVersion: console.openshift.io/v1
 kind: ConsoleConfig
-servingInfo:
-  bindAddress: https://[::]:8443
-  certFile: /var/serving-cert/tls.crt
-  keyFile: /var/serving-cert/tls.key
-clusterInfo: {}
 auth:
   clientID: console
   clientSecretFile: /var/oauth-config/clientSecret
-session: {}
+clusterInfo: {}
 customization:
   perspectives:
   - id: perspective1
+    pinnedResources:
+    - group: apps
+      version: v1
+      resource: deployments
+    - group: ""
+      version: v1
+      resource: configmaps
     visibility:
-      state: AccessReview
       accessReview:
-        required:
+        missing:
         - namespace: ""
           verb: list
           group: ""
           version: ""
-          resource: namespaces
+          resource: clusterroles
           subresource: ""
           name: ""
           fieldselector: null
           labelselector: null
-        missing:
+        required:
         - namespace: ""
           verb: list
           group: ""
           version: ""
-          resource: clusterroles
+          resource: namespaces
           subresource: ""
           name: ""
           fieldselector: null
           labelselector: null
-    pinnedResources:
-    - group: apps
-      version: v1
-      resource: deployments
-    - group: ""
-      version: v1
-      resource: configmaps
+      state: AccessReview
   - id: perspective2
     visibility:
       state: Disabled
 providers: {}
+servingInfo:
+  bindAddress: https://[::]:8443
+  certFile: /var/serving-cert/tls.crt
+  keyFile: /var/serving-cert/tls.key
+session: {}
 `,
 		},
 		{
@@ -1597,46 +1597,46 @@ providers: {}
 			},
 			output: `apiVersion: console.openshift.io/v1
 kind: ConsoleConfig
-servingInfo:
-  bindAddress: https://[::]:8443
-  certFile: /var/serving-cert/tls.crt
-  keyFile: /var/serving-cert/tls.key
-clusterInfo: {}
 auth:
   clientID: console
   clientSecretFile: /var/oauth-config/clientSecret
-session: {}
+clusterInfo: {}
 customization:
   perspectives:
   - id: perspective1
+    pinnedResources: []
     visibility:
-      state: AccessReview
       accessReview:
-        required:
+        missing:
         - namespace: ""
           verb: list
           group: ""
           version: ""
-          resource: namespaces
+          resource: clusterroles
           subresource: ""
           name: ""
           fieldselector: null
           labelselector: null
-        missing:
+        required:
         - namespace: ""
           verb: list
           group: ""
           version: ""
-          resource: clusterroles
+          resource: namespaces
           subresource: ""
           name: ""
           fieldselector: null
           labelselector: null
-    pinnedResources: []
+      state: AccessReview
   - id: perspective2
     visibility:
       state: Disabled
 providers: {}
+servingInfo:
+  bindAddress: https://[::]:8443
+  certFile: /var/serving-cert/tls.crt
+  keyFile: /var/serving-cert/tls.key
+session: {}
 `,
 		},
 		{
@@ -1651,21 +1651,21 @@ providers: {}
 			},
 			output: `apiVersion: console.openshift.io/v1
 kind: ConsoleConfig
-servingInfo:
-  bindAddress: https://[::]:8443
-  certFile: /var/serving-cert/tls.crt
-  keyFile: /var/serving-cert/tls.key
-clusterInfo: {}
 auth:
   clientID: console
   clientSecretFile: /var/oauth-config/clientSecret
-session: {}
+clusterInfo: {}
 customization:
   perspectives:
   - id: dev
     visibility:
       state: Disabled
 providers: {}
+servingInfo:
+  bindAddress: https://[::]:8443
+  certFile: /var/serving-cert/tls.crt
+  keyFile: /var/serving-cert/tls.key
+session: {}
 telemetry:
   a-boolean-as-string: "false"
   a-key: a-value
@@ -1687,25 +1687,25 @@ telemetry:
 			},
 			output: `apiVersion: console.openshift.io/v1
 kind: ConsoleConfig
-servingInfo:
-  bindAddress: https://[::]:8443
-  certFile: /var/serving-cert/tls.crt
-  keyFile: /var/serving-cert/tls.key
-clusterInfo: {}
 auth:
   clientID: console
   clientSecretFile: /var/oauth-config/clientSecret
-session: {}
+clusterInfo: {}
 customization:
-  perspectives:
-  - id: dev
-    visibility:
-      state: Disabled
   capabilities:
   - name: LightspeedButton
     visibility:
       state: Enabled
+  perspectives:
+  - id: dev
+    visibility:
+      state: Disabled
 providers: {}
+servingInfo:
+  bindAddress: https://[::]:8443
+  certFile: /var/serving-cert/tls.crt
+  keyFile: /var/serving-cert/tls.key
+session: {}
 `,
 		},
 	}
diff --git a/pkg/console/subresource/consoleserver/types.go b/pkg/console/subresource/consoleserver/types.go
index ca7d5fc5d..5db32eae9 100644
--- a/pkg/console/subresource/consoleserver/types.go
+++ b/pkg/console/subresource/consoleserver/types.go
@@ -18,21 +18,22 @@ import (

 // Config is the top-level console server cli configuration.
 type Config struct {
-	APIVersion                   string `yaml:"apiVersion"`
-	Kind                         string `yaml:"kind"`
-	ServingInfo                  `yaml:"servingInfo"`
-	ClusterInfo                  `yaml:"clusterInfo"`
+	APIVersion string `yaml:"apiVersion"`
+	Kind       string `yaml:"kind"`
+
 	Auth                         `yaml:"auth"`
-	Session                      `yaml:"session"`
-	Customization                `yaml:"customization"`
-	Providers                    `yaml:"providers"`
-	MonitoringInfo               `yaml:"monitoringInfo,omitempty"`
-	Plugins                      map[string]string             `yaml:"plugins,omitempty"`
-	I18nNamespaces               []string                      `yaml:"i18nNamespaces,omitempty"`
-	Proxy                        Proxy                         `yaml:"proxy,omitempty"`
+	ClusterInfo                  `yaml:"clusterInfo"`
 	ContentSecurityPolicy        map[v1.DirectiveType][]string `yaml:"contentSecurityPolicy,omitempty"`
 	ContentSecurityPolicyEnabled bool                          `yaml:"contentSecurityPolicyEnabled,omitempty"`
-	Telemetry                    map[string]string             `yaml:"telemetry,omitempty"`
+	Customization                `yaml:"customization"`
+	I18nNamespaces               []string `yaml:"i18nNamespaces,omitempty"`
+	MonitoringInfo               `yaml:"monitoringInfo,omitempty"`
+	Plugins                      map[string]string `yaml:"plugins,omitempty"`
+	Providers                    `yaml:"providers"`
+	Proxy                        Proxy `yaml:"proxy,omitempty"`
+	ServingInfo                  `yaml:"servingInfo"`
+	Session                      `yaml:"session"`
+	Telemetry                    map[string]string `yaml:"telemetry,omitempty"`
 }

 type Proxy struct {
@@ -40,27 +41,27 @@ type Proxy struct {
 }

 type ProxyService struct {
-	Endpoint       string `yaml:"endpoint"`
-	ConsoleAPIPath string `yaml:"consoleAPIPath"`
-	CACertificate  string `yaml:"caCertificate"`
 	Authorize      bool   `yaml:"authorize"`
+	CACertificate  string `yaml:"caCertificate"`
+	ConsoleAPIPath string `yaml:"consoleAPIPath"`
+	Endpoint       string `yaml:"endpoint"`
 }

 // ServingInfo holds configuration for serving HTTP.
 type ServingInfo struct {
-	BindAddress  string `yaml:"bindAddress,omitempty"`
-	CertFile     string `yaml:"certFile,omitempty"`
-	KeyFile      string `yaml:"keyFile,omitempty"`
-	RedirectPort int    `yaml:"redirectPort,omitempty"`
+	BindAddress string `yaml:"bindAddress,omitempty"`

 	// These fields are defined in `HTTPServingInfo`, but are not supported for console. Fail if any are specified.
 	// https://github.com/openshift/api/blob/0cb4131a7636e1ada6b2769edc9118f0fe6844c8/config/v1/types.go#L7-L38
 	BindNetwork           string        `yaml:"bindNetwork,omitempty"`
-	ClientCA              string        `yaml:"clientCA,omitempty"`
-	NamedCertificates     []interface{} `yaml:"namedCertificates,omitempty"`
-	MinTLSVersion         string        `yaml:"minTLSVersion,omitempty"`
+	CertFile              string        `yaml:"certFile,omitempty"`
 	CipherSuites          []string      `yaml:"cipherSuites,omitempty"`
+	ClientCA              string        `yaml:"clientCA,omitempty"`
+	KeyFile               string        `yaml:"keyFile,omitempty"`
 	MaxRequestsInFlight   int64         `yaml:"maxRequestsInFlight,omitempty"`
+	MinTLSVersion         string        `yaml:"minTLSVersion,omitempty"`
+	NamedCertificates     []interface{} `yaml:"namedCertificates,omitempty"`
+	RedirectPort          int           `yaml:"redirectPort,omitempty"`
 	RequestTimeoutSeconds int64         `yaml:"requestTimeoutSeconds,omitempty"`
 }

@@ -68,55 +69,55 @@ type ServingInfo struct {
 type ClusterInfo struct {
 	ConsoleBaseAddress   string                `yaml:"consoleBaseAddress,omitempty"`
 	ConsoleBasePath      string                `yaml:"consoleBasePath,omitempty"`
-	MasterPublicURL      string                `yaml:"masterPublicURL,omitempty"`
 	ControlPlaneToplogy  configv1.TopologyMode `yaml:"controlPlaneTopology,omitempty"`
-	ReleaseVersion       string                `yaml:"releaseVersion,omitempty"`
+	CopiedCSVsDisabled   bool                  `yaml:"copiedCSVsDisabled,omitempty"`
+	MasterPublicURL      string                `yaml:"masterPublicURL,omitempty"`
 	NodeArchitectures    []string              `yaml:"nodeArchitectures,omitempty"`
 	NodeOperatingSystems []string              `yaml:"nodeOperatingSystems,omitempty"`
-	CopiedCSVsDisabled   bool                  `yaml:"copiedCSVsDisabled,omitempty"`
+	ReleaseVersion       string                `yaml:"releaseVersion,omitempty"`
 }

 // MonitoringInfo holds configuration for monitoring related services
 type MonitoringInfo struct {
-	AlertmanagerUserWorkloadHost string `yaml:"alertmanagerUserWorkloadHost,omitempty"`
 	AlertmanagerTenancyHost      string `yaml:"alertmanagerTenancyHost,omitempty"`
+	AlertmanagerUserWorkloadHost string `yaml:"alertmanagerUserWorkloadHost,omitempty"`
 }

 // Auth holds configuration for authenticating with OpenShift. The auth method is assumed to be "openshift".
 type Auth struct {
 	AuthType                 string   `yaml:"authType,omitempty"`
-	OIDCIssuer               string   `yaml:"oidcIssuer,omitempty"`
-	OIDCExtraScopes          []string `yaml:"oidcExtraScopes,omitempty"`
-	OIDCOCLoginCommand       string   `yaml:"oidcOCLoginCommand,omitempty"`
 	ClientID                 string   `yaml:"clientID,omitempty"`
 	ClientSecretFile         string   `yaml:"clientSecretFile,omitempty"`
-	OAuthEndpointCAFile      string   `yaml:"oauthEndpointCAFile,omitempty"`
-	LogoutRedirect           string   `yaml:"logoutRedirect,omitempty"`
 	InactivityTimeoutSeconds int      `yaml:"inactivityTimeoutSeconds,omitempty"`
+	LogoutRedirect           string   `yaml:"logoutRedirect,omitempty"`
+	OAuthEndpointCAFile      string   `yaml:"oauthEndpointCAFile,omitempty"`
+	OIDCExtraScopes          []string `yaml:"oidcExtraScopes,omitempty"`
+	OIDCIssuer               string   `yaml:"oidcIssuer,omitempty"`
+	OIDCOCLoginCommand       string   `yaml:"oidcOCLoginCommand,omitempty"`
 }

 // Session holds configuration for web-session related configuration
 type Session struct {
-	CookieEncryptionKeyFile     string `yaml:"cookieEncryptionKeyFile,omitempty"`
 	CookieAuthenticationKeyFile string `yaml:"cookieAuthenticationKeyFile,omitempty"`
+	CookieEncryptionKeyFile     string `yaml:"cookieEncryptionKeyFile,omitempty"`
 	// TODO: move InactivityTimeoutSeconds here
 }

 // Customization holds configuration such as what logo to use.
 type Customization struct {
-	Branding             string `yaml:"branding,omitempty"`
-	DocumentationBaseURL string `yaml:"documentationBaseURL,omitempty"`
-	CustomProductName    string `yaml:"customProductName,omitempty"`
-	CustomLogoFile       string `yaml:"customLogoFile,omitempty"`
-	// developerCatalog allows to configure the shown developer catalog categories.
-	DeveloperCatalog *DeveloperConsoleCatalogCustomization `yaml:"developerCatalog,omitempty"`
-	ProjectAccess    ProjectAccess                         `yaml:"projectAccess,omitempty"`
-	QuickStarts      QuickStarts                           `yaml:"quickStarts,omitempty"`
 	// addPage allows customizing actions on the Add page in developer perspective.
-	AddPage AddPage `yaml:"addPage,omitempty"`
+	AddPage           AddPage                 `yaml:"addPage,omitempty"`
+	Branding          string                  `yaml:"branding,omitempty"`
+	Capabilities      []operatorv1.Capability `yaml:"capabilities,omitempty"`
+	CustomProductName string                  `yaml:"customProductName,omitempty"`
+	// developerCatalog allows to configure the shown developer catalog categories.
+	DeveloperCatalog     *DeveloperConsoleCatalogCustomization `yaml:"developerCatalog,omitempty"`
+	DocumentationBaseURL string                                `yaml:"documentationBaseURL,omitempty"`
+	Logos                []operatorv1.Logo                     `yaml:"logos,omitempty"`
 	// perspectives allows enabling/disabling of perspective(s) that user can see in the Perspective switcher dropdown.
-	Perspectives []Perspective           `yaml:"perspectives,omitempty"`
-	Capabilities []operatorv1.Capability `yaml:"capabilities,omitempty"`
+	Perspectives  []Perspective `yaml:"perspectives,omitempty"`
+	ProjectAccess ProjectAccess `yaml:"projectAccess,omitempty"`
+	QuickStarts   QuickStarts   `yaml:"quickStarts,omitempty"`
 }

 // QuickStarts contains options for quick starts
@@ -133,14 +134,18 @@ type ProjectAccess struct {
 type CatalogTypesState string

 const (
-	CatalogTypeEnabled  CatalogTypesState = "Enabled"
 	CatalogTypeDisabled CatalogTypesState = "Disabled"
+	CatalogTypeEnabled  CatalogTypesState = "Enabled"
 )

 // DeveloperConsoleCatalogTypes defines the state of the sub-catalog types.
 type DeveloperConsoleCatalogTypes struct {
-	// state defines if a list of catalog types should be enabled or disabled.
-	State CatalogTypesState `yaml:"state,omitempty"`
+	// disabled is a list of developer catalog types (sub-catalogs IDs) that are not shown to users.
+	// Types (sub-catalogs) are added via console plugins, the available types (sub-catalog IDs) are available
+	// in the console on the cluster configuration page, or when editing the YAML in the console.
+	// Example: "Devfile", "HelmChart", "BuilderImage"
+	// If the list is empty or all the available sub-catalog types are added, then the complete developer catalog should be hidden.
+	Disabled *[]string `yaml:"disabled,omitempty"`
 	// enabled is a list of developer catalog types (sub-catalogs IDs) that will be shown to users.
 	// Types (sub-catalogs) are added via console plugins, the available types (sub-catalog IDs) are available
 	// in the console on the cluster configuration page, or when editing the YAML in the console.
@@ -148,12 +153,8 @@ type DeveloperConsoleCatalogTypes struct {
 	// If the list is non-empty, a new type will not be shown to the user until it is added to list.
 	// If the list is empty the complete developer catalog will be shown.
 	Enabled *[]string `yaml:"enabled,omitempty"`
-	// disabled is a list of developer catalog types (sub-catalogs IDs) that are not shown to users.
-	// Types (sub-catalogs) are added via console plugins, the available types (sub-catalog IDs) are available
-	// in the console on the cluster configuration page, or when editing the YAML in the console.
-	// Example: "Devfile", "HelmChart", "BuilderImage"
-	// If the list is empty or all the available sub-catalog types are added, then the complete developer catalog should be hidden.
-	Disabled *[]string `yaml:"disabled,omitempty"`
+	// state defines if a list of catalog types should be enabled or disabled.
+	State CatalogTypesState `yaml:"state,omitempty"`
 }

 // DeveloperConsoleCatalogCustomization allow cluster admin to configure developer catalog.
@@ -198,9 +199,9 @@ type AddPage struct {
 type PerspectiveState string

 const (
-	PerspectiveEnabled      PerspectiveState = "Enabled"
-	PerspectiveDisabled     PerspectiveState = "Disabled"
 	PerspectiveAccessReview PerspectiveState = "AccessReview"
+	PerspectiveDisabled     PerspectiveState = "Disabled"
+	PerspectiveEnabled      PerspectiveState = "Enabled"
 )

 // PerspectiveID defines the id of the perspective.
@@ -217,19 +218,19 @@ const (
 // `required` and  `missing` can work together esp. in the case where the cluster admin
 // wants to show another perspective to users without specific permissions. Out of `required` and `missing` atleast one property should be non-empty.
 type ResourceAttributesAccessReview struct {
-	// required defines a list of permission checks. The perspective will only be shown when all checks are successful. When omitted, the access review is skipped and the perspective will not be shown unless it is required to do so based on the configuration of the missing access review list.
-	Required []authorizationv1.ResourceAttributes `yaml:"required,omitempty"`
 	// missing defines a list of permission checks. The perspective will only be shown when at least one check fails. When omitted, the access review is skipped and the perspective will not be shown unless it is required to do so based on the configuration of the required access review list.
 	Missing []authorizationv1.ResourceAttributes `yaml:"missing,omitempty"`
+	// required defines a list of permission checks. The perspective will only be shown when all checks are successful. When omitted, the access review is skipped and the perspective will not be shown unless it is required to do so based on the configuration of the missing access review list.
+	Required []authorizationv1.ResourceAttributes `yaml:"required,omitempty"`
 }

 // PerspectiveVisibility defines the criteria to show/hide a perspective.
 type PerspectiveVisibility struct {
+	// accessReview defines required and missing access review checks.
+	AccessReview *ResourceAttributesAccessReview `yaml:"accessReview,omitempty"`
 	// state defines the perspective is enabled or disabled or access review check is required.
 	// state is required
 	State PerspectiveState `yaml:"state"`
-	// accessReview defines required and missing access review checks.
-	AccessReview *ResourceAttributesAccessReview `yaml:"accessReview,omitempty"`
 }

 // Perspective defines a perspective that cluster admins want to show/hide in the perspective switcher dropdown
@@ -239,14 +240,14 @@ type Perspective struct {
 	// The available perspective ids can be found in the code snippet section next to the yaml editor.
 	// Incorrect or unknown ids will be ignored.
 	ID string `yaml:"id"`
-	// visibility defines the state of perspective along with access review checks if needed for that perspective.
-	// visibility is required
-	Visibility PerspectiveVisibility `yaml:"visibility"`
 	// pinnedResources defines the list of default pinned resources that users will see on the perspective navigation if they have not customized these pinned resources themselves.
 	// The list of available Kubernetes resources could be read via `kubectl api-resources`.
 	// The console will also provide a configuration UI and a YAML snippet that will list the available resources that can be pinned to the navigation.
 	// Incorrect or unknown resources will be ignored.
 	PinnedResources *[]operatorv1.PinnedResourceReference `yaml:"pinnedResources,omitempty"`
+	// visibility defines the state of perspective along with access review checks if needed for that perspective.
+	// visibility is required
+	Visibility PerspectiveVisibility `yaml:"visibility"`
 }

 type Providers struct {
@@ -254,8 +255,8 @@ type Providers struct {
 }

 type HelmChartRepo struct {
-	URL    string `yaml:"url,omitempty"`
 	CAFile string `yaml:"caFile,omitempty"`
+	URL    string `yaml:"url,omitempty"`
 }

 type Helm struct {
diff --git a/pkg/console/subresource/deployment/deployment.go b/pkg/console/subresource/deployment/deployment.go
index e2629f0c6..9842ce9fe 100644
--- a/pkg/console/subresource/deployment/deployment.go
+++ b/pkg/console/subresource/deployment/deployment.go
@@ -74,7 +74,6 @@ func DefaultDeployment(
 	sessionSecret *corev1.Secret,
 	proxyConfig *configv1.Proxy,
 	infrastructureConfig *configv1.Infrastructure,
-	canMountCustomLogo bool,
 ) *appsv1.Deployment {
 	authnCATrustConfigMap := localOAuthServingCertConfigMap
 	if authnCATrustConfigMap == nil {
@@ -102,7 +101,7 @@ func DefaultDeployment(
 		authServerCAConfigMap,
 		trustedCAConfigMap,
 		sessionSecret,
-		canMountCustomLogo,
+		&operatorConfig.Spec.Customization,
 	)
 	withConsoleContainerImage(deployment, operatorConfig, proxyConfig)
 	withConsoleNodeSelector(deployment, infrastructureConfig)
@@ -233,15 +232,20 @@ func withConsoleVolumes(
 	authServerCAConfigMap *corev1.ConfigMap,
 	trustedCAConfigMap *corev1.ConfigMap,
 	sessionSecret *corev1.Secret,
-	canMountCustomLogo bool) {
+	customization *operatorv1.ConsoleCustomization,
+) {
 	volumeConfig := defaultVolumeConfig()

 	caBundle, caBundleExists := trustedCAConfigMap.Data["ca-bundle.crt"]
 	if caBundleExists && caBundle != "" {
 		volumeConfig = append(volumeConfig, trustedCAVolume())
 	}
-	if canMountCustomLogo {
-		volumeConfig = append(volumeConfig, customLogoVolume())
+
+	if len(customization.Logos) > 0 {
+		volumeConfig = withCustomLogoVolumes(volumeConfig, customization.Logos)
+		// TODO remove deprecated CustomLogoFile API
+	} else if customization.CustomLogoFile.Name != "" && customization.CustomLogoFile.Key != "" {
+		volumeConfig = append(volumeConfig, customLogoVolume(customization.CustomLogoFile.Name))
 	}

 	if oauthServingCert != nil {
@@ -302,6 +306,24 @@ func withConsoleVolumes(
 	deployment.Spec.Template.Spec.Volumes = vols
 }

+func withCustomLogoVolumes(volumeConfig []volumeConfig, customLogos []operatorv1.Logo) []volumeConfig {
+	u := map[string]string{}
+	if len(customLogos) > 0 {
+		for _, logo := range customLogos {
+			for _, theme := range logo.Themes {
+				name := theme.Source.ConfigMap.Name
+				u[name] = name
+			}
+		}
+	}
+
+	for _, name := range u {
+		volumeConfig = append(volumeConfig, customLogoVolume(name))
+	}
+
+	return volumeConfig
+}
+
 func withConsoleContainerImage(
 	deployment *appsv1.Deployment,
 	operatorConfig *operatorv1.Console,
@@ -495,10 +517,10 @@ func trustedCAVolume() volumeConfig {
 	}
 }

-func customLogoVolume() volumeConfig {
+func customLogoVolume(name string) volumeConfig {
 	return volumeConfig{
-		name:        api.OpenShiftCustomLogoConfigMapName,
-		path:        "/var/logo/",
+		name:        name,
+		path:        fmt.Sprintf("/var/logo/%s/", name),
 		isConfigMap: true}
 }

diff --git a/pkg/console/subresource/deployment/deployment_test.go b/pkg/console/subresource/deployment/deployment_test.go
index a9182385d..09b0b2578 100644
--- a/pkg/console/subresource/deployment/deployment_test.go
+++ b/pkg/console/subresource/deployment/deployment_test.go
@@ -48,7 +48,6 @@ func TestDefaultDeployment(t *testing.T) {
 		sessionSecret                  *corev1.Secret
 		proxyConfig                    *configv1.Proxy
 		infrastructureConfig           *configv1.Infrastructure
-		canMountCustomLogo             bool
 	}

 	consoleOperatorConfig := &operatorsv1.Console{
@@ -183,12 +182,12 @@ func TestDefaultDeployment(t *testing.T) {
 	withConsoleContainerImage(consoleDeploymentTemplate, consoleOperatorConfig, proxyConfig)
 	withConsoleVolumes(consoleDeploymentTemplate, &corev1.ConfigMap{
 		Data: map[string]string{"ca-bundle.crt": "test"},
-	}, nil, trustedCAConfigMapEmpty, nil, false)
+	}, nil, trustedCAConfigMapEmpty, nil, &operatorsv1.ConsoleCustomization{})
 	consoleDeploymentContainer := consoleDeploymentTemplate.Spec.Template.Spec.Containers[0]
 	consoleDeploymentVolumes := consoleDeploymentTemplate.Spec.Template.Spec.Volumes
 	withConsoleVolumes(consoleDeploymentTemplate, &corev1.ConfigMap{
 		Data: map[string]string{"ca-bundle.crt": "test"},
-	}, nil, trustedCAConfigMapSet, nil, false)
+	}, nil, trustedCAConfigMapSet, nil, &operatorsv1.ConsoleCustomization{})
 	consoleDeploymentContainerTrusted := consoleDeploymentTemplate.Spec.Template.Spec.Containers[0]
 	consoleDeploymentVolumesTrusted := consoleDeploymentTemplate.Spec.Template.Spec.Volumes

@@ -526,7 +525,6 @@ func TestDefaultDeployment(t *testing.T) {
 				tt.args.sessionSecret,
 				tt.args.proxyConfig,
 				tt.args.infrastructureConfig,
-				tt.args.canMountCustomLogo,
 			), tt.want); diff != nil {
 				t.Error(diff)
 			}
@@ -898,10 +896,10 @@ func TestWithAffinity(t *testing.T) {

 func TestWithConsoleVolumes(t *testing.T) {
 	type args struct {
+		customization      *operatorsv1.ConsoleCustomization
 		deployment         *appsv1.Deployment
 		trustedCAConfigMap *corev1.ConfigMap
 		sessionSecret      *corev1.Secret
-		canMountCustomLogo bool
 	}

 	trustedCAConfigMap := &corev1.ConfigMap{
@@ -990,6 +988,35 @@ func TestWithConsoleVolumes(t *testing.T) {
 		},
 	}

+	logosVolumes := []corev1.Volume{
+		{
+			Name: "favicon-logos",
+			VolumeSource: corev1.VolumeSource{
+				ConfigMap: &corev1.ConfigMapVolumeSource{
+					LocalObjectReference: corev1.LocalObjectReference{
+						Name: "favicon-logos",
+					},
+					Items:       nil,
+					DefaultMode: nil,
+					Optional:    nil,
+				},
+			},
+		},
+		{
+			Name: "masthead-logos",
+			VolumeSource: corev1.VolumeSource{
+				ConfigMap: &corev1.ConfigMapVolumeSource{
+					LocalObjectReference: corev1.LocalObjectReference{
+						Name: "masthead-logos",
+					},
+					Items:       nil,
+					DefaultMode: nil,
+					Optional:    nil,
+				},
+			},
+		},
+	}
+
 	trustedCAVolume := corev1.Volume{
 		Name: api.TrustedCAConfigMapName,
 		VolumeSource: corev1.VolumeSource{
@@ -1053,7 +1080,20 @@ func TestWithConsoleVolumes(t *testing.T) {
 	customLogoVolumeMount := corev1.VolumeMount{
 		Name:      api.OpenShiftCustomLogoConfigMapName,
 		ReadOnly:  false,
-		MountPath: "/var/logo/",
+		MountPath: "/var/logo/custom-logo/",
+	}
+
+	logosVolumeMounts := []corev1.VolumeMount{
+		{
+			Name:      "favicon-logos",
+			ReadOnly:  false,
+			MountPath: "/var/logo/favicon-logos/",
+		},
+		{
+			Name:      "masthead-logos",
+			ReadOnly:  false,
+			MountPath: "/var/logo/masthead-logos/",
+		},
 	}

 	defaultVolumeMounts := []corev1.VolumeMount{
@@ -1074,9 +1114,9 @@ func TestWithConsoleVolumes(t *testing.T) {
 		{
 			name: "Test Volumes With Only CA Bundle",
 			args: args{
+				customization:      &operatorsv1.ConsoleCustomization{},
 				deployment:         consoleDeployment,
 				trustedCAConfigMap: trustedCAConfigMap,
-				canMountCustomLogo: false,
 			},
 			want: &appsv1.Deployment{
 				Spec: appsv1.DeploymentSpec{
@@ -1094,12 +1134,15 @@ func TestWithConsoleVolumes(t *testing.T) {
 				},
 			},
 		},
+		// TODO remove deprecated CustomLogoFile API
 		{
-			name: "Test Volumes Without CA Bundle And Custom Logo False",
+			name: "Test Volumes Without CA Bundle And Empty Custom Logo File",
 			args: args{
+				customization: &operatorsv1.ConsoleCustomization{
+					CustomLogoFile: configv1.ConfigMapFileReference{},
+				},
 				deployment:         consoleDeployment,
 				trustedCAConfigMap: &corev1.ConfigMap{},
-				canMountCustomLogo: false,
 			},
 			want: &appsv1.Deployment{
 				Spec: appsv1.DeploymentSpec{
@@ -1117,35 +1160,47 @@ func TestWithConsoleVolumes(t *testing.T) {
 				},
 			},
 		},
+		// TODO remove deprecated CustomLogoFile API
 		{
-			name: "Test Volumes With Only Custom Logo True",
+			name: "Test Volumes With Only Custom Logo File",
 			args: args{
+				customization: &operatorsv1.ConsoleCustomization{
+					CustomLogoFile: configv1.ConfigMapFileReference{
+						Name: "custom-logo",
+						Key:  "custom-logo.png",
+					},
+				},
 				deployment:         consoleDeployment,
 				trustedCAConfigMap: &corev1.ConfigMap{},
-				canMountCustomLogo: true,
 			},
 			want: &appsv1.Deployment{
 				Spec: appsv1.DeploymentSpec{
 					Template: corev1.PodTemplateSpec{
 						Spec: corev1.PodSpec{
+							Volumes: customLogoVolumes,
 							Containers: []corev1.Container{
 								{
 									Name:         "consoleContainer",
 									VolumeMounts: customLogoVolumeMounts,
 								},
 							},
-							Volumes: customLogoVolumes,
 						},
 					},
 				},
 			},
 		},
+		// TODO remove deprecated CustomLogoFile API
 		{
-			name: "Test Volumes With CA bundle And Custom Logo True",
+			name: "Test Volumes With CA bundle And Custom Logo File",
 			args: args{
+				customization: &operatorsv1.ConsoleCustomization{
+					CustomLogoFile: configv1.ConfigMapFileReference{
+						Name: "custom-logo",
+						Key:  "custom-logo.png",
+					},
+				},
 				deployment:         consoleDeployment,
 				trustedCAConfigMap: trustedCAConfigMap,
-				canMountCustomLogo: true,
 			},
 			want: &appsv1.Deployment{
 				Spec: appsv1.DeploymentSpec{
@@ -1163,6 +1218,82 @@ func TestWithConsoleVolumes(t *testing.T) {
 				},
 			},
 		},
+		{
+			name: "Test Volumes With Logos",
+			args: args{
+				customization: &operatorsv1.ConsoleCustomization{
+					Logos: []operatorsv1.Logo{
+						{
+							Type: operatorsv1.LogoTypeFavicon,
+							Themes: []operatorsv1.Theme{
+								{
+									Mode: operatorsv1.ThemeModeDark,
+									Source: operatorsv1.FileReferenceSource{
+										From: "ConfigMap",
+										ConfigMap: &operatorsv1.ConfigMapFileReference{
+											Name: "favicon-logos",
+											Key:  "favicon-logo-dark.png",
+										},
+									},
+								},
+								{
+									Mode: operatorsv1.ThemeModeLight,
+									Source: operatorsv1.FileReferenceSource{
+										From: "ConfigMap",
+										ConfigMap: &operatorsv1.ConfigMapFileReference{
+											Name: "favicon-logos",
+											Key:  "favicon-logo-light.png",
+										},
+									},
+								},
+							},
+						},
+						{
+							Type: operatorsv1.LogoTypeMasthead,
+							Themes: []operatorsv1.Theme{
+								{
+									Mode: operatorsv1.ThemeModeDark,
+									Source: operatorsv1.FileReferenceSource{
+										From: "ConfigMap",
+										ConfigMap: &operatorsv1.ConfigMapFileReference{
+											Name: "masthead-logos",
+											Key:  "masthead-logo-dark.png",
+										},
+									},
+								},
+								{
+									Mode: operatorsv1.ThemeModeLight,
+									Source: operatorsv1.FileReferenceSource{
+										From: "ConfigMap",
+										ConfigMap: &operatorsv1.ConfigMapFileReference{
+											Name: "masthead-logos",
+											Key:  "masthead-logo-light.png",
+										},
+									},
+								},
+							},
+						},
+					},
+				},
+				deployment:         consoleDeployment,
+				trustedCAConfigMap: &corev1.ConfigMap{},
+			},
+			want: &appsv1.Deployment{
+				Spec: appsv1.DeploymentSpec{
+					Template: corev1.PodTemplateSpec{
+						Spec: corev1.PodSpec{
+							Containers: []corev1.Container{
+								{
+									Name:         "consoleContainer",
+									VolumeMounts: append(defaultVolumeMounts, logosVolumeMounts...),
+								},
+							},
+							Volumes: append(defaultVolumes, logosVolumes...),
+						},
+					},
+				},
+			},
+		},
 	}
 	for _, tt := range tests {
 		t.Run(tt.name, func(t *testing.T) {
@@ -1172,7 +1303,7 @@ func TestWithConsoleVolumes(t *testing.T) {
 				nil,
 				tt.args.trustedCAConfigMap,
 				tt.args.sessionSecret,
-				tt.args.canMountCustomLogo,
+				tt.args.customization,
 			)
 			if diff := deep.Equal(tt.args.deployment, tt.want); diff != nil {
 				t.Error(diff)
